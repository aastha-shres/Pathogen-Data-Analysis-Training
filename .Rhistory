# Helper function
simulate_quanti_tray_counts <- function(n) {
tibble(
small_cell_count = sample(0:49, n, replace = TRUE),
large_cell_count = sample(0:48, n, replace = TRUE)
)
}
n <- nrow(sample_metadata)  # 420
# IDEXX data
microbio_data <- sample_metadata %>%
bind_cols(
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("total_coliform_", .)),
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("e_coli_", .)),
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("ar_total_coliform_", .)),
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("ar_e_coli_", .))
)
# ESBL data
microbio_data <- microbio_data %>%
mutate(
plate_weight = case_when(sample_type == "effluent" | sample_type == "compost" ~ sample(0.301:0.425, n, replace = TRUE),
sample_type == "produce" ~ NA_real_),
wet_weight = case_when(sample_type %in% c("effluent", "compost") ~ runif(n, min = 4.901, max = 5.125),
sample_type == "produce" ~ NA_real_),
dry_weight = case_when(sample_type == "effluent" ~ sample(2.85:4.55, n, replace = TRUE),
sample_type == "compost" ~ sample(3.81:5.101, n, replace = TRUE),
sample_type == "produce" ~ NA_real_),
esbl_e_coli_present = rbinom(n, 1, 0.3),
esbl_e_coli_cfu = if_else(esbl_e_coli_present == 1, sample(1:250, n, replace = TRUE), 0)
)
# Save and preview
head(microbio_data)
write_csv(microbio_data, "./simulated_data/microbial_data_simulated.csv")
# Number of TAC cards needed: 7 samples per card
n_cards <- ceiling(nrow(sample_metadata) / 7)
# Simulate pathogen targets (you can customize this list)
targets <- c(
# Bacteria
"Campylobacter", "Salmonella", "Shigella", "E. coli O157", "ETEC", "EPEC",
"EAEC", "STEC", "Vibrio cholerae", "Yersinia enterocolitica",
"Clostridium difficile", "Aeromonas", "Helicobacter pylori",
"Listeria monocytogenes", "Bacteroides fragilis",
# Viruses
"Norovirus GI", "Norovirus GII", "Rotavirus A", "Astrovirus",
"Adenovirus 40/41", "Sapovirus", "Enterovirus", "Hepatitis A", "Hepatitis E",
# Protozoa
"Giardia", "Cryptosporidium", "Entamoeba histolytica",
"Blastocystis", "Cyclospora", "Dientamoeba fragilis",
# Helminths
"Ascaris", "Trichuris", "Ancylostoma", "Necator", "Strongyloides",
# Antibiotic Resistance Genes (optional group)
"blaCTX-M", "blaNDM", "mecA", "tetA", "sul1", "qnrS",
# Fecal markers / process controls
"HF183", "CrAssphage", "Sketa22", "BacHum", "MS2", "Spiked_Extraction_Control", "No Template Control"
)
simulate_card_file <- function(card_num, samples_on_card, out_dir = "./simulated_data/simulated_cards") {
# Add 8th sample as NTC
ntc_sample <- tibble(
sample_id = paste0("NTC_card", sprintf("%02d", card_num)),
household_id = NA,
sample_type = "NTC"
)
full_samples <- bind_rows(samples_on_card, ntc_sample)
# Define TAC well layout (A1–H6, assuming 48 targets, 8 samples, 6 targets per column)
wells <- paste0(rep(LETTERS[1:8], each = 6), rep(1:6, 8))
# Expand data for all targets
df <- expand_grid(
Sample = full_samples$sample_id,
Target = targets
) %>%
arrange(Sample, Target) %>%
mutate(
Cq = ifelse(Sample == ntc_sample$sample_id, NA, ifelse(runif(n()) < 0.3, round(runif(n(), 20, 35), 2), NA_real_)),
AMP = case_when(
!is.na(Cq) ~ "Amp",
runif(n()) < 0.1 ~ "Inconclusive",
TRUE ~ "No Amp"
),
`Amp Score` = ifelse(!is.na(Cq), round(runif(n(), 1.2, 2.0), 2), round(runif(n(), 0.0, 1.1), 2)),
Result = case_when(
!is.na(Cq) ~ "Positive",
AMP == "Inconclusive" ~ "Equivocal",
TRUE ~ "Negative"
),
`Cq Conf` = ifelse(!is.na(Cq), round(runif(n(), 0.8, 1.0), 2), round(runif(n(), 0.0, 0.5), 2)),
`Cq SD` = ifelse(!is.na(Cq), round(runif(n(), 0.1, 1.0), 2), NA_real_)
)
# Assign wells (repeat A1–H6 for each target)
df <- df %>%
group_by(Sample) %>%
mutate(Well = rep(wells[1:length(targets)], length.out = n())) %>%
ungroup()
# Create output directory if needed
dir.create(out_dir, showWarnings = FALSE)
# Create safe filename
date <- Sys.Date() + days(card_num)
time <- format(Sys.time(), "%H%M%S")
file_name <- paste0("card", sprintf("%02d", card_num), "_hka_", format(date, "%Y%m%d"),
"_Results_", format(date, "%Y%m%d"), "_", time, ".xlsx")
# Write file
write_csv(df, file.path(out_dir, file_name))
return(file_name)
}
# Split across 60 cards
n_cards <- ceiling(nrow(sample_metadata) / 7)
card_files <- vector("character", n_cards)
for (i in 1:n_cards) {
start <- (i - 1) * 7 + 1
end <- min(i * 7, nrow(sample_metadata))
card_samples <- sample_metadata[start:end, ]
card_files[i] <- simulate_card_file(i, card_samples)
}
# Show generated files
print(card_files)
library(read_xl)
library(readxl)
# Check working directory
here()
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Check working directory
here()
here()
setwd("/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
here()
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check working directory
here()
# Set new directory if needed
setwd(/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training)
# Set new directory if needed
setwd("/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check current directory & set new directory if needed
here()
setwd("/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
here()
# Check current directory & set new directory if needed
here()
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
install.packages(c("here", "tidyverse", "dplyr", "quantitray", "readxl"))
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
install.packages(c("here", "tidyverse", "dplyr", "quantitray", "readxl"))
# Check current directory & set new directory if needed
here()
library(here)
here()
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","janitor","pathwork","pheatmap"))
# Load libraries
library(here)
library(tidyverse)
library(janitor)
library(patchwork)
library(pheatmap)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
install.packages(c("here", "tidyverse", "dplyr", "quantitray", "readxl"))
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","janitor","pathwork","pheatmap"))
# Load libraries
library(here)
library(tidyverse)
library(janitor)
library(patchwork)
library(pheatmap)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
install.packages(c("here", "tidyverse", "dplyr", "quantitray", "readxl"))
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
install.packages("remotes")
install.packages(c("here", "tidyverse", "dplyr", "quantitray", "readxl"))
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
install.packages("remotes")
# Load libraries
library(here)
library(tidyverse)
install.packages(c("here", "tidyverse", "dplyr", "quantitray", "readxl"))
library(dplyr)
library(quantitray)
remotes::install_github("jknappe/quantitray")
library(quantitray)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
#install.packages("remotes")
#remotes::install_github("jknappe/quantitray")
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check current directory & set new directory if needed
here()
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Folder path for TAC .csvs
tac_folder <- here("simulated_data", "simulated_cards")
# Read and combine all TAC .xlsx output files into tac_raw
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.xlsx$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
# Code provided to check structure
names(microbio_df) # variable names
summary(microbio_df) # summary of data
head(microbio_df, n=8) # view top 8 rows
unique(microbio_df$sample_id) %>% length() # number of samples
table(microbio_df$sample_type) # number of rows in dataset by type
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
# Workshop task: Check your new variables
# Add code here to check soil_moisture (continuous) and sample_type (categorical)
# Workshop task: Add MPN estimates using quantify_mpn()
# Hint: type help("quantify_mpn") in console to get information about how to use the command
microbio_clean <- microbio_clean %>%
mutate(
# Add total coliform and E. coli MPN estimation (with 95% confidence limits) code here
tc_mpn =
tc_mpn_lo =
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
# Workshop task: Check your new variables
# Add code here to check soil_moisture (continuous) and sample_type (categorical)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check current directory & set new directory if needed
here()
microbio_clean <- microbio_clean %>%
mutate(
# Total coliform
tc_mpn = quantify_mpn(total_coliform_large_cell_count, total_coliform_small_cell_count, method = "qt-2000"),
tc_mpn_lo = quantify_95lo(total_coliform_large_cell_count, total_coliform_small_cell_count, method = "qt-2000"),
tc_mpn_hi = quantify_95hi(total_coliform_large_cell_count, total_coliform_small_cell_count, method = "qt-2000"),
# E. coli
ecoli_mpn = quantify_mpn(e_coli_large_cell_count, e_coli_small_cell_count, method = "qt-2000"),
ecoli_mpn_lo = quantify_95lo(e_coli_large_cell_count, e_coli_small_cell_count, method = "qt-2000"),
ecoli_mpn_hi = quantify_95hi(e_coli_large_cell_count, e_coli_small_cell_count, method = "qt-2000"),
# antibiotic-resistant TC
ar_tc_mpn = quantify_mpn(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count, method = "qt-2000"),
ar_tc_mpn_lo = quantify_95lo(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count, method = "qt-2000"),
ar_tc_mpn_hi = quantify_95hi(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count, method = "qt-2000"),
# antibiotic-resistant E. coli
ar_ecoli_mpn = quantify_mpn(ar_e_coli_large_cell_count, ar_e_coli_small_cell_count, method = "qt-2000"),
ar_ecoli_mpn_lo = quantify_95lo(ar_e_coli_large_cell_count, ar_e_coli_small_cell_count, method = "qt-2000"),
ar_ecoli_mpn_hi = quantify_95hi(ar_e_coli_large_cell_count, ar_e_coli_small_cell_count, method = "qt-2000")
)
# Check dataset
microbio_clean %>%
select(household_id, sample_type, tc_mpn:ar_ecoli_mpn_hi) %>%
head(10)
# Replace NA values with 0s and create detection indicators
microbio_clean <- microbio_clean %>%
mutate(
across(everything(), ~replace_na(.x, 0)), # replace NAs with 0s across all variables in dataframe
tc_detect = if_else(tc_mpn > 0, 1, 0), # set detect = 1 if mpn > 0
ar_tc_detect = if_else(ar_tc_mpn > 0, 1, 0),
ec_detect = if_else(ecoli_mpn > 0, 1, 0),
ar_ec_detect = if_else(ar_ecoli_mpn > 0, 1, 0)
)
hist(microbio_clean$esbl_e_coli_cfu) # check distribution with histogram
microbio_clean2 <- microbio_clean %>%
mutate(moisture_fraction = soil_moisture / 100) %>%
mutate(esbl_e_coli_cfu_adj = if_else(esbl_e_coli_cfu == 0, 0.5, esbl_e_coli_cfu),
adjusted_esbl_cfu = case_when(
sample_type %in% c("effluent", "compost") ~ esbl_e_coli_cfu_adj / (1 - moisture_fraction) / 2,
sample_type == "produce" ~ esbl_e_coli_cfu_adj,
TRUE ~ NA_real_ ),
log_adjusted_esbl_cfu = log10(adjusted_esbl_cfu) + 1)
hist(microbio_clean2$adjusted_esbl_cfu)
hist(microbio_clean2$log_adjusted_esbl_cfu)
# further investigate distribution with a histogram by sample type
ggplot(microbio_clean2, aes(x = log_adjusted_esbl_cfu, fill = sample_type)) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal()
microbio_clean2 <- microbio_clean2 %>%
mutate(across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .),
.names = "{.col}_adj")) %>%
mutate(across(matches("_adj$"),
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
mutate(across(matches("^adjusted_.*_adj$"), ~ log10(.) + 1, .names = "log_{.col}"))
# Check distributions before vs. after transforming
hist(microbio_clean2$tc_mpn) ; hist(microbio_clean2$ecoli_mpn)
hist(microbio_clean2$ar_tc_mpn) ; hist(microbio_clean2$ar_ecoli_mpn)
hist(microbio_clean2$log_adjusted_tc_mpn_adj);  hist(microbio_clean2$log_adjusted_ecoli_mpn_adj)
hist(microbio_clean2$log_adjusted_ar_tc_mpn_adj); hist(microbio_clean2$log_adjusted_ar_ecoli_mpn_adj)
# Check TAC data
names(tac_raw)
summary(tac_raw)
head(tac_raw)
unique(tac_raw$Sample) %>% length() # number of unique samples
unique(tac_raw$Sample[grepl("NTC", tac_raw$Sample)]) %>% length() # number of non-template controls
unique(tac_raw$Sample[grepl("NTC", tac_raw$Sample) & tac_raw$Result == "Positive"]) %>% length() # N failed NTCs
# Workshop task: Clean TAC data and extract variables
tac_clean <- tac_raw %>%
filter(!grepl("NTC", Sample, ignore.case = TRUE)) %>% # remove non-template controls
# extract household_id and sample_type and create binary detect variable here
mutate(
household_id = str_extract(Sample, "HH\\d+"),
sample_type = str_extract(Sample, "effluent|compost|produce"),
detect = if_else(Result == "Positive", 1, 0)
)
View(tac_clean)
# Workshop task: Clean TAC data and extract variables
tac_clean <- tac_raw %>%
filter(!grepl("NTC", Sample, ignore.case = TRUE)) %>% # remove non-template controls
# extract household_id and sample_type and create binary detect variable here
mutate(
household_id = str_extract(Sample, "HH\\d+"),
sample_type = str_extract(Sample, "effluent|compost|produce"),
detect = if_else(Result == "Positive", 1, 0)
)
View(tac_clean)
microbio_clean3 <- microbio_clean2 %>%
select(household_id, sample_type, soil_moisture, esbl_ec_cfu = esbl_e_coli_cfu,
log_adj_esbl_ecoli = log_adjusted_esbl_cfu, esbl_ecoli_detect = esbl_e_coli_present,
log_adj_tc_mpn = log_adjusted_tc_mpn_adj, log_adj_ec_mpn = log_adjusted_ecoli_mpn_adj,
log_adj_ar_tc_mpn = log_adjusted_ar_tc_mpn_adj, log_adj_ar_ec_mpn = log_adjusted_ar_ecoli_mpn_adj,
tc_detect, ec_detect, ar_tc_detect, ar_ec_detect)
write_csv(microbio_clean3, here("clean_data", "microbial_data_cleaned.csv")) # clean_data is folder in current directory
write_csv(tac_clean %>%
select(household_id, sample_type, Target, Well, Cq, Cq_sd = `Cq SD`, Result, detect),
here("clean_data", "tac_data_cleaned.csv"))
View(tac_clean)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","janitor","pathwork","pheatmap"))
# Load libraries
library(here)
library(tidyverse)
library(janitor)
library(patchwork)
library(pheatmap)
install.packages(c("here", "tidyverse", "janitor", "pathwork", "pheatmap"))
library(pheatmap)
microbio_clean <- read_csv(here("clean_data", "microbial_data_cleaned.csv"))
tac_clean <- read_csv(here("clean_data", "tac_data_cleaned.csv"))
tac_prev <- tac_clean %>%
group_by(Target) %>%
summarize(prevalence = mean(detect, na.rm = TRUE), # remove NA values in calculations
sd = sd(detect, na.rm = TRUE)) %>%
arrange(desc(prevalence)) # show pathogen targets in order of highest to lowest prevalence
head(tac_prev, 10)
tac_prev %>%
top_n(10, prevalence) %>% # select top 10 values of prevalence
ggplot(aes(x = reorder(Target, prevalence), # plot x (Target) in order of prevalence values
y = prevalence)) +
geom_col(fill = "steelblue") +
coord_flip() + # flip x and y axis so barplot is sideways
labs(title = "Top 10 Pathogen Prevalence (TAC)", x = "Target", y = "Prevalence") +
theme_bw() + # use this for set themes (theme_minimal(), theme_classic(), etc)
theme(axis.ticks.y = element_blank(), # customize theme (remove axis ticks)
axis.title = element_text(size = 11, face = "bold"))
tac_burden <- tac_clean %>%
group_by(household_id, sample_type) %>% # for each household and sample type
summarize(num_detected = sum(detect, na.rm = TRUE)) # sum total detects
# summarize new variable indicating total number detected by sample
summary(tac_burden$num_detected)
# Use ggplot to plot a histogram
tac_burden %>%
ggplot(aes(x = num_detected, fill = sample_type)) +
geom_histogram(binwidth = 1, alpha = 0.8) + # test out what happens when you change binwidth
labs(title = "Number of Pathogens Detected per Sample", fill = "Sample Type",
x = "# Pathogens", y = "Count") +
theme_bw() +
theme(axis.title = element_text(size = 11, face = "bold"),
legend.title = element_text(size = 11, face = "bold"))
# Create a lookup table to categorize TAC targets
tac_categories <- tibble::tibble(
Target = unique(tac_clean$Target),
Category = case_when(
grepl("18S|Giardia|Cryptosporidium|Entamoeba", Target, ignore.case = TRUE) ~ "Parasite",
grepl("Adeno|Rota|Noro|Astro|Sapovirus", Target, ignore.case = TRUE) ~ "Virus",
grepl("Shigella|Salmonella|Campylo|E. coli|Vibrio|Aeromonas|Kleb|Clostrid|Enterococcus", Target, ignore.case = TRUE) ~ "Bacteria",
grepl("ARG|CTX|NDM|OXA|SHV|KPC|VIM", Target, ignore.case = TRUE) ~ "ARG",
grepl("Ascaris|Trichuris|Strongyloides|Hookworm", Target, ignore.case = TRUE) ~ "Helminth",
TRUE ~ "Other"
)
)
# Merge categories into the TAC data
tac_clean <- tac_clean %>%
left_join(tac_categories, by = "Target")
tac_categorized <- tac_clean %>%
group_by(sample_type, Category) %>%
summarize(
prevalence = mean(detect, na.rm = TRUE),
.groups = "drop"
)
# Set Category variable as ordered factor
tac_categorized$Category <- factor(tac_categorized$Category,
levels = c("Other", "Helminth","Parasite","Virus","Bacteria","ARG"))
# Plot as a heatmap
ggplot(tac_categorized, aes(x = sample_type, y = Category, fill = prevalence)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "C", name = "Prevalence") +
geom_text(aes(label = sprintf("%.1f%%", prevalence * 100)), size = 3, color = "black") +
labs(title = "Pathogen Burden by Category and Sample Type",
x = "Sample Type", y = "Category") +
theme_minimal(base_size = 11) + # set font size for entire plot
coord_fixed() + # forces x and y axes to be plotted in proportion (squares instead of rectangles)
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"))
# Plot as a heatmap
ggplot(tac_clean, aes(x = household_id, y = Target, fill = as.factor(detect))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("grey","purple")) +
# geom_text(aes(label = sprintf("%.1f%%", prevalence * 100)), size = 3, color = "black") +
labs(title = "Pathogen Burden", x = "Sample", y = "Target", fill = "Detect") +
facet_wrap(~sample_type, scales = "free_x", nrow = 3) +
theme_minimal(base_size = 11) + # set font size for entire plot
# coord_fixed() + # forces x and y axes to be plotted in proportion (squares instead of rectangles)
theme(axis.text.x = element_blank(),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"))
microbio_clean %>%
summarize(
ecoli_positive = mean(ec_detect),
ar_ecoli_positive = mean(ar_ec_detect),
tc_positive = mean(tc_detect),
ar_tc_positive = mean(ar_tc_detect)
)
amr_profile <- microbio_clean %>%
count(sample_type, esbl = adjusted_esbl_cfu > 0) %>%
mutate(freq = n / sum(n))
